---
// Dados da galeria
const galeriaItemsRaw = [
  {
    id: 1,
    tipo: 'video',
    tipoVideo: 'local',
    titulo: 'Aftermovie - Casarão 682',
    descricao: '31/05/2025 - Jaú/SP',
    thumbnail: '/banda.webp',
    videoSrc: '/banda-video.mp4',
    objectPosition: 'object-center',
    url: '#'
  },
  {
    id: 2,
    tipo: 'foto',
    titulo: 'Casarão 682',
    descricao: '31/05/2025 - Jaú/SP',
    imagem: '/galeria/fotos/casarao1.webp',
    objectPosition: 'object-center',
    url: '#'
  },
  {
    id: 3,
    tipo: 'foto',
    titulo: 'Casarão 682',
    descricao: '31/05/2025 - Jaú/SP', 
    imagem: '/galeria/fotos/casarao2.webp',
    objectPosition: 'object-center',
    url: '#'
  },
  {
    id: 4,
    tipo: 'foto',
    titulo: 'Casarão 682',
    descricao: '31/05/2025 - Jaú/SP',
    imagem: '/galeria/fotos/casarao3.webp',
    objectPosition: 'object-center',
    url: '#'
  },
  {
    id: 5,
    tipo: 'foto',
    titulo: 'Casarão 682',
    descricao: '31/05/2025 - Jaú/SP',
    imagem: '/galeria/fotos/casarao4.webp',
    objectPosition: 'object-center',
    url: '#'
  },
  {
    id: 6,
    tipo: 'foto',
    titulo: 'Casarão 682',
    descricao: '31/05/2025 - Jaú/SP',
    imagem: '/galeria/fotos/casarao5.webp',
    objectPosition: 'object-[100%_30%]',
    url: '#'
  },
  {
    id: 7,
    tipo: 'foto',
    titulo: 'Casarão 682',
    descricao: '31/05/2025 - Jaú/SP',
    imagem: '/galeria/fotos/casarao6.webp',
    objectPosition: 'object-center',
    url: '#'
  },
  {
    id: 8,
    tipo: 'foto',
    titulo: 'Casarão 682',
    descricao: '31/05/2025 - Jaú/SP',
    imagem: '/galeria/fotos/casarao7.webp',
    objectPosition: 'object-center',
    url: '#'
  }
];

// Ordenar itens pelos IDs para garantir ordem correta
const galeriaItems = galeriaItemsRaw.sort((a, b) => a.id - b.id);
---

<section id="galeria" class="py-16 bg-black">
  <div class="container px-4 md:px-6 mx-auto">
    <h2 class="text-3xl font-bebas text-[#b9963d] uppercase mb-4 text-center tracking-wider">
      Galeria
    </h2>

    <!-- Filtros -->
    <div class="flex justify-center mb-12">
      <div class="flex flex-wrap gap-4 bg-gray-900/50 p-2 rounded-lg border border-gray-800 ">
        <button 
          data-filter="todos" 
          class="filter-btn active px-6 py-2 font-bebas uppercase tracking-wider text-md transition-all duration-300 rounded-md"
        >
          Todos
        </button>
        <button 
          data-filter="video" 
          class="filter-btn px-6 py-2 font-bebas uppercase tracking-wider text-md transition-all duration-300 rounded-md"
        >
          Vídeos
        </button>
        <button 
          data-filter="foto" 
          class="filter-btn px-6 py-2 font-bebas uppercase tracking-wider text-md transition-all duration-300 rounded-md"
        >
          Fotos
        </button>
      </div>
    </div>

    <!-- Desktop/Tablet Grid -->
    <div class="hidden md:grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="galeria-grid-desktop">
      {galeriaItems.map((item) => (
        <div 
          class={`galeria-item group cursor-pointer transition-all duration-300 ${item.tipo}`}
          data-tipo={item.tipo}
          data-tipo-video={item.tipoVideo || ''}
          data-video-src={item.videoSrc || ''}
          data-video-id={'videoId' in item ? item.videoId || '' : ''}
          data-titulo={item.titulo}
          data-descricao={item.descricao}
        >
          <div class="aspect-video relative mb-4 overflow-hidden rounded-md bg-gray-900">
            <!-- Overlay de interação -->
            <div class="absolute inset-0 bg-black/60 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-300 z-10">
              {item.tipo === 'video' ? (
                <svg class="h-12 w-12 text-[#b9963d]" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              ) : (
                <svg class="h-12 w-12 text-[#b9963d]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                </svg>
              )}
            </div>
            
            <!-- Imagem/Thumbnail -->
            <img
              src={item.thumbnail || item.imagem}
              alt={item.titulo}
              class={`w-full h-full object-cover group-hover:scale-110 transition-transform duration-300 ${item.objectPosition || 'object-center'}`}
              loading="lazy"
            />
            
            <!-- Ícone de Play para Vídeos (sempre visível) -->
            {item.tipo === 'video' && (
              <div class="absolute inset-0 flex items-center justify-center z-15 pointer-events-none">
                <div class="bg-black/70 rounded-full p-4 border-2 border-[#b9963d] shadow-lg">
                  <svg class="h-8 w-8 text-[#b9963d] ml-1" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                </div>
              </div>
            )}
            
            <!-- Badge do tipo -->
            <div class="absolute top-3 left-3 z-20">
              <span class={`px-2 py-1 text-xs font-semibold uppercase rounded ${
                item.tipo === 'video' 
                  ? 'bg-red-600 text-white' 
                  : 'bg-blue-600 text-white'
              }`}>
                {item.tipo === 'video' ? 'Vídeo' : 'Foto'}
              </span>
            </div>
          </div>
          
          <!-- Informações do item -->
          <div class="space-y-1">
            <h3 class="text-lg font-bebas text-[#b9963d] uppercase tracking-wider group-hover:text-[#d4a852] transition-colors">
              {item.titulo}
            </h3>
            <p class="text-[#e0e0e0] text-sm opacity-80">
              {item.descricao}
            </p>
          </div>
        </div>
      ))}
    </div>

    <!-- Mobile Carrossel -->
    <div class="md:hidden relative">
      <div class="overflow-hidden">
        <div id="galeria-carousel" class="flex transition-transform duration-300 ease-in-out">
          {galeriaItems.map((item, index) => (
            <div 
              class={`galeria-item-mobile min-w-full px-4 cursor-pointer ${item.tipo}`}
              data-tipo={item.tipo}
              data-tipo-video={item.tipoVideo || ''}
              data-video-src={item.videoSrc || ''}
              data-video-id={'videoId' in item ? item.videoId || '' : ''}
              data-titulo={item.titulo}
              data-descricao={item.descricao}
            >
              <div class="aspect-video relative mb-4 overflow-hidden rounded-md bg-gray-900 max-w-sm mx-auto">
                <!-- Overlay de interação -->
                <div class="absolute inset-0 bg-black/60 flex items-center justify-center opacity-0 active:opacity-100 transition-all duration-300 z-10">
                  {item.tipo === 'video' ? (
                    <svg class="h-12 w-12 text-[#b9963d]" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  ) : (
                    <svg class="h-12 w-12 text-[#b9963d]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                  )}
                </div>
                
                <!-- Imagem/Thumbnail -->
                <img
                  src={item.thumbnail || item.imagem}
                  alt={item.titulo}
                  class={`w-full h-full object-cover transition-transform duration-300 ${item.objectPosition || 'object-center'}`}
                  loading="lazy"
                />
                
                <!-- Ícone de Play para Vídeos (sempre visível) -->
                {item.tipo === 'video' && (
                  <div class="absolute inset-0 flex items-center justify-center z-15 pointer-events-none">
                    <div class="bg-black/70 rounded-full p-4 border-2 border-[#b9963d] shadow-lg">
                      <svg class="h-8 w-8 text-[#b9963d] ml-1" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                      </svg>
                    </div>
                  </div>
                )}
                
                <!-- Badge do tipo -->
                <div class="absolute top-3 left-3 z-20">
                  <span class={`px-2 py-1 text-xs font-semibold uppercase rounded ${
                    item.tipo === 'video' 
                      ? 'bg-red-600 text-white' 
                      : 'bg-blue-600 text-white'
                  }`}>
                    {item.tipo === 'video' ? 'Vídeo' : 'Foto'}
                  </span>
                </div>
              </div>
              
              <!-- Informações do item -->
              <div class="space-y-1 text-center">
                <h3 class="text-lg font-bebas text-[#b9963d] uppercase tracking-wider">
                  {item.titulo}
                </h3>
                <p class="text-[#e0e0e0] text-sm opacity-80">
                  {item.descricao}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Indicadores (bolinhas) -->
      <div class="flex justify-center space-x-2 mt-6">
        {galeriaItems.map((item, index) => (
          <button 
            class={`galeria-carousel-dot w-3 h-3 rounded-full transition-all duration-200 cursor-pointer ${
              index === 0 
                ? 'bg-[#b9963d]' 
                : 'bg-[#b9963d]/30'
            }`}
            data-slide={index}
            data-id={item.id}
          ></button>
        ))}
      </div>
    </div>

    <!-- Botão Ver Mais -->
    <div class="mt-12 text-center">
      <button 
        id="ver-galeria-btn"
        class="inline-flex items-center gap-2 px-6 py-3 border-2 border-[#b9963d] text-[#b9963d] hover:bg-[#b9963d] hover:text-black font-bebas uppercase tracking-wider transition-all duration-300 rounded-md group cursor-pointer"
      >
        Ver galeria completa
        <svg class="h-4 w-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
        </svg>
      </button>
    </div>
  </div>
</section>

<!-- Modal para visualizar imagens/vídeos -->
<div id="modal" class="fixed inset-0 bg-black/90 z-50 hidden items-center justify-center p-4">
  <div class="relative max-w-4xl w-full">
    <button 
      id="modal-close" 
      class="absolute -top-12 right-0 text-white hover:text-[#b9963d] transition-colors z-10"
    >
      <svg class="h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
    <div id="modal-content" class="bg-gray-900 rounded-lg overflow-hidden">
      <!-- Conteúdo será inserido dinamicamente -->
    </div>
  </div>
</div>

<style>
  .filter-btn {
    @apply text-gray-400 hover:text-[#b9963d] hover:bg-gray-800;
  }
  
  .filter-btn.active {
    @apply bg-[#b9963d] text-black;
  }
  
  .galeria-item {
    transform: scale(1);
  }
  
  .galeria-item.hidden {
    @apply opacity-0 scale-95 pointer-events-none;
  }
  
  .galeria-item:hover {
    transform: scale(1.02);
  }

  .galeria-item-mobile.hidden {
    @apply opacity-30 pointer-events-none;
  }
  
  /* Animação suave para filtros */
  .galeria-item, .galeria-item-mobile {
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  /* CSS das bolinhas removido para usar apenas Tailwind */
</style>

<script>
  // @ts-nocheck
  // Funcionalidade de filtros e carrossel
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Galeria: DOM carregado, iniciando...');
    
    const filterButtons = document.querySelectorAll('.filter-btn');
    const galeriaItemsDesktop = document.querySelectorAll('.galeria-item');
    const galeriaItemsMobile = document.querySelectorAll('.galeria-item-mobile');
    const carousel = document.getElementById('galeria-carousel');
    const dots = document.querySelectorAll('.galeria-carousel-dot');
    const modal = document.getElementById('modal');
    const modalContent = document.getElementById('modal-content');
    const modalClose = document.getElementById('modal-close');
    const verGaleriaBtn = document.getElementById('ver-galeria-btn');
    
    let currentSlide = 0;
    let totalSlides = 8; // Exatamente 8 itens ordenados por ID

    // Verificar se os elementos existem
    if (!modal || !modalContent || !modalClose || !carousel || !dots.length) {
      console.error('❌ Elementos necessários não encontrados!');
      return;
    }

    console.log(`✅ Galeria inicializada: ${totalSlides} slides, ${dots.length} bolinhas da galeria`);
    
    // Debug: verificar se temos exatamente 8 bolinhas da galeria
    if (dots.length !== 8) {
      console.warn(`⚠️ Esperado 8 bolinhas da galeria, encontrado ${dots.length}`);
    }
    
    // Usar todas as bolinhas (devem ser exatamente 8)
    const validDots = Array.from(dots);
    
    // Função para atualizar itens e bolinhas visíveis baseado no filtro
    function updateVisibleItems(filter = 'todos') {
      let visibleItems = [];
      let visibleIndex = 0;
      
      galeriaItemsMobile.forEach((item, originalIndex) => {
        const itemTipo = item.getAttribute('data-tipo');
        const isVisible = filter === 'todos' || filter === itemTipo;
        
        if (isVisible) {
          // Item visível - remover hidden e resetar transform
          item.classList.remove('hidden');
          item.style.transform = ''; // Limpar transform individual
          visibleItems.push({item, originalIndex, visibleIndex});
          visibleIndex++;
        } else {
          // Item oculto
          item.classList.add('hidden');
          item.style.transform = ''; // Limpar transform individual
        }
      });
      
      // Reordenar itens visíveis no DOM para carrossel funcionar corretamente
      const carousel = document.getElementById('galeria-carousel');
      if (carousel) {
        // Remover todos os itens do carousel
        while (carousel.firstChild) {
          carousel.removeChild(carousel.firstChild);
        }
        
        // Adicionar apenas itens visíveis na ordem correta
        visibleItems.forEach(({item}) => {
          carousel.appendChild(item);
        });
      }
      
      // Atualizar bolinhas - mostrar apenas para itens visíveis
      validDots.forEach((dot, index) => {
        const isVisible = visibleItems.some(vi => vi.originalIndex === index);
        if (isVisible) {
          dot.classList.remove('hidden', 'opacity-0');
          dot.classList.add('opacity-100');
        } else {
          dot.classList.remove('opacity-100');
          dot.classList.add('hidden', 'opacity-0');
        }
      });
      
      // Recalcular total de slides visíveis
      totalSlides = visibleItems.length;
      
      console.log(`🔍 Filtro '${filter}': ${totalSlides} itens visíveis`);
      
      return visibleItems;
    }
    
    // Função para atualizar as bolinhas (apenas itens visíveis)
    function updateDots() {
      let visibleDotIndex = 0;
      
      validDots.forEach((dot, index) => {
        // Só processa bolinhas visíveis
        if (!dot.classList.contains('hidden')) {
          if (visibleDotIndex === currentSlide) {
            // Bolinha ativa - dourada
            dot.classList.remove('bg-[#b9963d]/30');
            dot.classList.add('bg-[#b9963d]');
          } else {
            // Bolinha inativa - transparente
            dot.classList.remove('bg-[#b9963d]');
            dot.classList.add('bg-[#b9963d]/30');
          }
          visibleDotIndex++;
        }
      });
    }

    // Função para ir para um slide específico (considerando apenas itens visíveis)
    function goToSlide(slideIndex) {
      if (!carousel || slideIndex < 0 || slideIndex >= totalSlides) {
        console.warn(`⚠️ goToSlide: índice inválido ${slideIndex} (total: ${totalSlides})`);
        return;
      }
      
      currentSlide = slideIndex;
      const translateX = -slideIndex * 100;
      carousel.style.transform = `translateX(${translateX}%)`;
      
      updateDots();
    }

    // Event listeners para as bolinhas (apenas visíveis)
    validDots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        // Encontrar o índice do slide visível
        const visibleDots = validDots.filter(d => !d.classList.contains('hidden'));
        const visibleIndex = visibleDots.indexOf(dot);
        
        if (visibleIndex !== -1) {
          goToSlide(visibleIndex);
        }
      });
    });

    // Suporte para swipe em touch (mobile)
    if (carousel) {
      let startX = 0;
      let isDragging = false;

      carousel.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        isDragging = true;
      });

      carousel.addEventListener('touchend', (e) => {
        if (!isDragging) return;
        
        const endX = e.changedTouches[0].clientX;
        const diffX = startX - endX;
        
        if (Math.abs(diffX) > 50) {
          const visibleItemsCount = totalSlides; // totalSlides já é recalculado pelo filtro
          
          if (diffX > 0 && currentSlide < visibleItemsCount - 1) {
            // Swipe para esquerda - próximo slide visível
            goToSlide(currentSlide + 1);
          } else if (diffX < 0 && currentSlide > 0) {
            // Swipe para direita - slide anterior visível
            goToSlide(currentSlide - 1);
          }
        }
        
        isDragging = false;
      });
    }
    
    // Filtros
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active de todos os botões
        filterButtons.forEach(btn => btn.classList.remove('active'));
        // Adiciona active ao botão clicado
        button.classList.add('active');
        
        const filter = button.getAttribute('data-filter');
        if (!filter) return;
        
        // Filtrar itens desktop (grid)
        galeriaItemsDesktop.forEach(item => {
          const itemTipo = item.getAttribute('data-tipo');
          
          if (filter === 'todos' || filter === itemTipo) {
            item.classList.remove('hidden');
          } else {
            item.classList.add('hidden');
          }
        });

        // Filtrar itens mobile (carrossel) e atualizar bolinhas
        updateVisibleItems(filter);

        // Reset para o primeiro slide visível
        currentSlide = 0;
        if (carousel) {
          carousel.style.transform = 'translateX(0%)';
        }
        updateDots();
        
        console.log(`✅ Filtro '${filter}' aplicado - resetado para slide 0`);
      });
    });

    // Inicialização - garantir que comece no primeiro slide (ID 1)
    currentSlide = 0;
    if (carousel) {
      carousel.style.transform = 'translateX(0%)';
    }
    
    // Inicializar com todos os itens visíveis
    updateVisibleItems('todos');
    
    console.log('✅ Carrossel inicializado no slide 0 (ID 1) - primeira bolinha ativa');
    
    // Modal para visualizar itens (desktop e mobile)
    function setupModalForItems(items) {
      items.forEach(item => {
        item.addEventListener('click', () => {
          const tipo = item.getAttribute('data-tipo');
          const tipoVideo = item.getAttribute('data-tipo-video');
          const videoSrc = item.getAttribute('data-video-src');
          const videoId = item.getAttribute('data-video-id');
          const titulo = item.getAttribute('data-titulo') || '';
          const descricao = item.getAttribute('data-descricao') || '';
          const imagemElement = item.querySelector('img');
          const imagem = imagemElement?.src || '';
          
          if (!tipo) return;
          
          let content = '';
          
          if (tipo === 'video') {
            if (tipoVideo === 'local' && videoSrc) {
              // Vídeo local
              content = `
                <div class="aspect-video">
                  <video controls class="w-full h-full rounded-lg" autoplay>
                    <source src="${videoSrc}" type="video/mp4">
                    Seu navegador não suporta vídeo HTML5.
                  </video>
                </div>
                <div class="p-6">
                  <h3 class="text-xl font-bebas text-[#b9963d] uppercase">${titulo}</h3>
                  <p class="text-gray-300 text-sm">${descricao}</p>
                </div>
              `;
            } else if (tipoVideo === 'youtube' && videoId) {
              // YouTube
              content = `
                <div class="aspect-video">
                  <iframe 
                    src="https://www.youtube.com/embed/${videoId}?autoplay=1" 
                    class="w-full h-full rounded-lg"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen>
                  </iframe>
                </div>
                <div class="p-6">
                  <h3 class="text-xl font-bebas text-[#b9963d] uppercase">${titulo}</h3>
                  <p class="text-gray-300 text-sm">${descricao}</p>
                </div>
              `;
            } else if (tipoVideo === 'cloudinary' && videoSrc) {
              // Cloudinary ou outros vídeos externos
              content = `
                <div class="aspect-video">
                  <video controls class="w-full h-full rounded-lg" autoplay>
                    <source src="${videoSrc}" type="video/mp4">
                    Seu navegador não suporta vídeo HTML5.
                  </video>
                </div>
                <div class="p-6">
                  <h3 class="text-xl font-bebas text-[#b9963d] uppercase">${titulo}</h3>
                  <p class="text-gray-300 text-sm">${descricao}</p>
                </div>
              `;
            } else {
              // Fallback para vídeos sem configuração adequada
              content = `
                <div class="aspect-video bg-gray-800 flex items-center justify-center">
                  <div class="text-center text-gray-400">
                    <svg class="h-16 w-16 mx-auto mb-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                    <p class="text-lg font-bebas uppercase">Vídeo: ${titulo}</p>
                    <p class="text-sm mt-2">${descricao}</p>
                    <p class="text-xs mt-4 opacity-60">Vídeo não disponível</p>
                  </div>
                </div>
              `;
            }
          } else {
            // Foto
            content = `
              <div class="relative">
                <img src="${imagem}" alt="${titulo}" class="w-full h-auto rounded-lg">
                <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6">
                  <h3 class="text-xl font-bebas text-[#b9963d] uppercase">${titulo}</h3>
                  <p class="text-gray-300 text-sm">${descricao}</p>
                </div>
              </div>
            `;
          }
          
          if (modalContent) {
            modalContent.innerHTML = content;
          }
          if (modal) {
            modal.classList.remove('hidden');
            modal.classList.add('flex');
          }
          document.body.style.overflow = 'hidden';
        });
      });
    }

    // Configurar modal para ambos desktop e mobile
    setupModalForItems(galeriaItemsDesktop);
    setupModalForItems(galeriaItemsMobile);
    
    // Fechar modal
    if (modalClose) {
      modalClose.addEventListener('click', closeModal);
    }
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });
    }
    
    function closeModal() {
      if (!modal || !modalContent) return;
      
      // Parar qualquer vídeo que esteja tocando
      const videos = modalContent.querySelectorAll('video');
      videos.forEach(video => {
        video.pause();
        video.currentTime = 0;
      });
      
      // Limpar o conteúdo do modal para remover iframes do YouTube
      modalContent.innerHTML = '';
      
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.style.overflow = 'auto';
    }
    
    // Fechar modal com ESC
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeModal();
      }
    });

    // Botão "Ver galeria completa"
    if (verGaleriaBtn) {
      verGaleriaBtn.addEventListener('click', () => {
        alert('A galeria completa estará disponível em breve! =)');
      });
    }
  });
</script>

